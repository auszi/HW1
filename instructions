Question 1 (30 POINTS ):  Given the input string “WELOVEALGORITHMS”, answer the following questions: 
1.A.) (15 POINTS) Using the MergeSort algorithm provided in the course slides, illustrate the operation of MergeSort to manually sort this string. Please show each step of your recursive solution clearly.  
 
1.B.) (10 POINTS) Perform a running time analysis (Θ only) of executing the MergeSort algorithm on this input. Use a generic “n” value for the input size.  
Hint: As the given input is an arbitrary string, you should be considering average running time. 

1.C) (5 POINTS) Using the size of the given input string , what will be the numeric value of the running time? Please show your work. 

Question 2. (40 POINTS): Implement the InsertionSort and MergeSort algorithms in any programming language of your choice. Then measure the runtime of each algorithm for integer arrays of sizes given in 2A through 2D.  
 
2.A.) (10 POINTS) size n=100 
-	case 1: for a sorted array of ascending order,  
-	case 2: for a sorted array of descending order,  
-	case 3: for an unsorted (random) array 
 
2.B.) (10 POINTS) size n=1000 
-	case 1: for a sorted array of ascending order,  
-	case 2: for a sorted array of descending order,  
-	case 3: for an unsorted (random) array 
 
2.C.) (10 POINTS) size n=10000 
-	case 1: for a sorted array of ascending order,  
-	case 2: for a sorted array of descending order,  
-	case 3: for an unsorted (random) array 
  
2.D.) (10 POINTS) size n=100000 elements 
-	case 1: for a sorted array of ascending order,  
-	case 2: for a sorted array of descending order,  
-	case 3: for an unsorted (random) array 
 
Plot the input size vs. runtime graph for each algorithm for each size and for each case. You can plot the graph either manually, or by using an automated tool. Compare and comment on the results. Please attach your program source code to your submission. 
 
Hint: For your convenience, you may randomly assign elements to the arrays. 
 
Question 3. (30 POINTS) Write the pseudocode for recursive Binary Search algorithm. Analyze its running time. Please show your work. 
